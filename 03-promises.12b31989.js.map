{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SAiFA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,EAzCA,CACXQ,KAAMC,SAASC,cAAc,QAC7BC,iBAAkBF,SAASC,cAAc,YAGtCF,KAAKI,iBAAiB,UAAUC,IACnCA,EAAEC,iBAEF,IAAIC,EAAQC,OAAOH,EAAEI,cAAcjB,MAAMkB,OACzC,MAAMC,EAAOH,OAAOH,EAAEI,cAAcE,KAAKD,OACnCE,EAASJ,OAAOH,EAAEI,cAAcG,OAAOF,OAG7C,IAAK,IAAIG,EAAW,EAAGA,GAAYD,EAAQC,GAAY,EACrDvB,EAAcuB,EAAUN,GACrBO,MAAK,EAACvB,SAAEA,EAAQC,MAAEA,MACjBuB,EAAA3B,GAAS4B,OAAOC,QACd,uBAAqB1B,QAAiBC,MAAU,IAGnD0B,OAAM,EAAC3B,SAAEA,EAAQC,MAAEA,MAClBuB,EAAA3B,GAAS4B,OAAOG,QACd,sBAAoB5B,QAAeC,MAAU,IAInDe,GAASI,EAGXN,EAAEI,cAAcW,OAAO","sources":["src/js/03-promises.js"],"sourcesContent":["// all modules Notiflix\nimport Notiflix from 'notiflix';\n\n/*Завдання 3 - генератор промісів​\n\nВиконуй це завдання у файлах 03-promises.html і 03-promises.js. Подивися демо-відео роботи генератора промісів.\nHTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах, крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n*/\n/* <form class=\"form\">\n  <label>\n    First delay (ms)\n    <input type=\"number\" name=\"delay\" required />\n  </label>\n  <label>\n    Delay step (ms)\n    <input type=\"number\" name=\"step\" required />\n  </label>\n  <label>\n    Amount\n    <input type=\"number\" name=\"amount\" required />\n  </label>\n  <button type=\"submit\">Create promises</button>\n</form>\n*/\n/*\nНапиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount. Під час кожного виклику передай їй номер промісу (position), що створюється, і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n\nДоповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу. Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів. Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\ncreatePromise(2, 1500)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n  */\n/* Бібліотека повідомлень\n\nУВАГА\nНаступний функціонал не обов'язковий для здавання завдання, але буде хорошою додатковою практикою.\nДля відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix.*/\n/* recomendation from Sergiy illarionov\n1. + Добавити розмітку +\n2. + Добавити 'submit' слухача на форму\n3. Зловити в події дані з форми - 'delay', 'step', 'amount'\n4. Використати 'amount' як к-сть запуску функції createPromise\n5. Викликати createPromise n разів і використати index як 'position' \ni delay = (delay + step) із форми \n*/\n\nconst refs = {\n  form: document.querySelector('form'),\n  createPromiseBtn: document.querySelector('button'),\n};\n\nrefs.form.addEventListener('submit', e => {\n  e.preventDefault();\n\n  let delay = Number(e.currentTarget.delay.value);\n  const step = Number(e.currentTarget.step.value);\n  const amount = Number(e.currentTarget.amount.value);\n  // console.log({ delay, step, amount }); // {delay: 2000, step: 200, amount: 6}\n\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n\n    delay += step;\n  }\n\n  e.currentTarget.reset();\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","form","document","querySelector","createPromiseBtn","addEventListener","e","preventDefault","delay1","Number","currentTarget","value","step","amount","position1","then","$parcel$interopDefault","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.12b31989.js.map"}